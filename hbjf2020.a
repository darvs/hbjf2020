!src "macros.a"
!src "stub.a"

*=$2000
!bin "background_bitmap.raw"


*=$c000
!bin "background_screen.raw"

; *=$c400
; !bin "clouds_color-ram.raw"

; -------------------
;  ASM
; -------------------

!macro spriteshow .y, .speed, .floor {
	lda .y
	cmp #.floor
	bmi +
	lda #.floor
	sta .y
	jmp ++
+
	adc .speed
	sta .y
++
}

*=$0820

	; set colors
	+setimm foreground, black
	+setimm background, dark_grey

	ldx #$00
-
	lda #$20
	sta screen	+ 256 * 0, x
	sta screen	+ 256 * 1, x
	sta screen	+ 256 * 2, x
	sta screen	+ 256 * 2 - 18, x

	lda #black
	sta color_memory + 256 * 0, x
	sta color_memory + 256 * 1, x
	sta color_memory + 256 * 2, x
	sta color_memory + 256 * 2 - 18, x

	inx
	bne -
	
	; switch to lowercase mode
	+switch_lowercase

	; set 38 column mode
	;+setimm horscroll, col38
	lda horscroll
	and #%11110111
	sta horscroll

beginning

	;enable all sprites
	+setimm sprite_enable, $ff

	; copy sprite data to memory image data
	+memcpy sprite_0, $2000 + 64 * 0, 64
	+memcpy sprite_1, $2000 + 64 * 1, 64
	+memcpy sprite_2, $2000 + 64 * 2, 64

	; set the sprite pointers to our image data
	+setimm sprite_ptr_0, ($2000 + 64 * 0) / 64 ; j
	+setimm sprite_ptr_1, ($2000 + 64 * 1) / 64 ; e
	+setimm sprite_ptr_2, ($2000 + 64 * 2) / 64 ; f
	+setimm sprite_ptr_3, ($2000 + 64 * 2) / 64 ; f, same as sprite 2

	; all sprites expanded 2x in x and y
	+setimm sprite_x_expansion, 2^0 + 2^1 + 2^2 + 2^3
	+setimm sprite_y_expansion, 2^0 + 2^1 + 2^2 + 2^3

	; set basic sprite color
	+setimm sprite_col_0, dark_grey
	+setimm sprite_col_1, dark_grey
	+setimm sprite_col_2, dark_grey
	+setimm sprite_col_3, dark_grey

	; set all sprites to multicolor
	+setimm sprite_multi, 2^0 + 2^1 + 2^2 + 2^3
	+setimm sprite_multicolor_2, grey
	+setimm sprite_multicolor_1, light_grey 

	; set sprite x positions
	+setimm sprite_0_x, ($64)
	+setimm sprite_1_x, ($64 + $2b)
	+setimm sprite_2_x, ($64 + $2b + $26)
	+setimm sprite_3_x, ($64 + $2b + $26 + $1d)

	; set sprite y positions
	+setimm sprite_0_y, $00
	+setimm sprite_1_y, $00
	+setimm sprite_2_y, $00
	+setimm sprite_3_y, $00

	; set scroll color
	ldy #0
-
	lda #yellow
	sta color_memory + 40 * scroll_line, y
	iny
	cpy #40
	bne -


	; set strlen to the message length
	ldy #$00
-
	lda .msg, y
	beq +
	iny
	jmp -
+
	sty strlen

	; clear message offset
	+setimm offset, $00

	; initialize scroll
	lda horscroll
	and #%11100111
	ora #7
	sta horscroll

	+setimm slowdown, max_slowdown

	; jeff animation
	lda #00
	sta sprite_0_y
	sta sprite_1_y
	sta sprite_2_y
	sta sprite_3_y

	lda #6
	sta sprite_0_v
	lda #5
	sta sprite_1_v
	lda #4
	sta sprite_2_v
	lda #3
	sta sprite_3_v


	ldy # 127/3 + 30
showloop
	+spriteshow sprite_0_y, sprite_0_v, 127
	+spriteshow sprite_1_y, sprite_1_v, 127
	+spriteshow sprite_2_y, sprite_2_v, 127
	+spriteshow sprite_3_y, sprite_3_v, 127
	+sleep
	+sleep
	+sleep
	+sleep
	dey
	beq +
	jmp showloop
+

	; setup irq handler
	+sleep
	jsr irq_setup

	; set color ram to the bitmap's color
	jsr set_color_ram

	; wait for spacebar
-
	lda $dc01
	cmp #$ef
	bne -

; The End.

	rts


set_color_ram
	; clear screen
	ldx #$00
-
	lda $c000 		+ 256 * 0, x
	sta screen	+ 256 * 0, x
	lda $c000 		+ 256 * 1, x
	sta screen	+ 256 * 1, x

	lda $c000 		+ 256 * 2, x
	lda #black
	sta screen	+ 256 * 2, x

	; wipe the color between the bitmap and the scroll

	lda #black
	sta color_memory	+ 256 * 2, x

	inx
	bne -				; did X overflow to zero yet?

	ldx #$00
	lda #$20
-
	sta screen + 18 * 40, x 
	inx
	bne -

	rts

; -------------------
;  irq setup
; -------------------

irq_setup
	; from https://www.c64-wiki.com/wiki/Raster_interrupt
	lda #%01111111
	sta cia_interrupt_control_and_status
	and screen_control_register_1
	sta screen_control_register_1
	+setimm interrupt_raster_line, int_grafx_raster_line
	+set16 interrupt_vector, grafx
	+setimm interrupt_control_register, $01

	rts

; -------------------
;  Horizontal Scroll
; -------------------

scroller
	pha
	tya
	pha
	txa
	pha

	dec slowdown
	bne ++
	+setimm slowdown, max_slowdown

	; scroll one pixel to the left
	lda horscroll
	and #7
	beq +
	dec horscroll
	jmp ++
+
	jsr charscroll ; scroll char on horscroll 0
	lda horscroll
	ora #7
	sta horscroll ; reset horscroll to 7
++
	+setimm interrupt_raster_line, int_grafx_raster_line
	+set16 interrupt_vector, grafx

	pla
	tax
	pla
	tay
	pla

	asl interrupt_status_register
	jmp final_interrupt_handler



charscroll
	;+setimm background, blue

	ldy offset ; current offset in the message

	; start printing the message
	ldx #0
-
	cpy strlen
	bne +
	ldy #0 ; wrap around the end of the message
	jmp -
+
	lda .msg, y
	sta screen + 40 * scroll_line, x

	iny ; increment the message offset

	inx
	cpx #39 ; did we reach the end of the line?
	bne -

	inc offset ; reset the offset
	lda offset
	cmp strlen
	bne +
	+setimm offset, $00 ; wrap around message if we're at the end 
+
	+setimm background, dark_grey

	rts


grafx
	+setimm background, red

	; set graphics mode
	lda $d011
	;pha
	sta tmp1
	and #%10011111
	ora #%00100000
	sta $d011

	; set multi-color graphics
	lda $d016
	sta tmp2
	;pha
	ora #%00010000
	sta $d016

	; set graphics source
	lda $d018
	sta tmp3
	;pha
	ora #%00001000
	sta $d018

	ldy horscroll
	sty last_horscroll
	+setimm horscroll, 0

	+setimm interrupt_raster_line, int_text_raster_line
	+set16 interrupt_vector, textmode

	asl interrupt_status_register
	jmp default_interrupt_handler


textmode

	lda tmp3
	sta $d018

	lda tmp2
	sta $d016

	lda tmp1
	sta $d011

	ldy last_horscroll
	sty horscroll

	+setimm background, dark_grey

	+setimm interrupt_raster_line, int_scroller_raster_line
	+set16 interrupt_vector, scroller

	asl interrupt_status_register
	jmp default_interrupt_handler

; ---------------
;  data
; ---------------

!addr {
	clrscr = $e544
	screen = $0400
	color_memory = $d800

	background = $d020
	foreground = $d021
	horscroll = $d016

	sprite_enable = $d015

	sprite_ptr_0 = $07f8
	sprite_ptr_1 = $07f9
	sprite_ptr_2 = $07fa
	sprite_ptr_3 = $07fb

	sprite_col_0 = $d027
	sprite_col_1 = $d028
	sprite_col_2 = $d029
	sprite_col_3 = $d02a

	sprite_multi = $d01c

	sprite_0_x = $d000
	sprite_0_y = $d001
	sprite_1_x = $d002
	sprite_1_y = $d003
	sprite_2_x = $d004
	sprite_2_y = $d005
	sprite_3_x = $d006
	sprite_3_y = $d007

	sprite_x_expansion = $d01d
	sprite_y_expansion = $d017

	sprite_multicolor_1 = $d025
	sprite_multicolor_2 = $d026
}

!addr {
	cia_interrupt_control_and_status = $dc0d
	screen_control_register_1 = $d011
	memory_setup_register = $d018
	interrupt_raster_line = $d012
	interrupt_vector = $0314
	interrupt_control_register = $d01a
	interrupt_status_register = $d019
	default_interrupt_handler = $ea31
	final_interrupt_handler = $ea81
}

; 38 columns mode for horscroll

col40 = $08
col38 = $00

; line to scroll

scroll_line = $16

; colors

black				= $00
white				= $01
red					= $02
blue				= $06
cyan				= $03
purple			= $04
green				= $05
yellow			= $07
orange			= $08
brown				= $09
pink				= $0A
dark_grey		= $0B
grey				= $0C
light_green	= $0D
light_blue	= $0E
light_grey	= $0F

; registers

!addr {

	.r1		= $fb  ; fb/fc  as 16-bits register 1
	.hi1	= $fb
	.lo1	= $fc

	; .r2		= $fd  ; fd/fe  as 16-bits register 2
	; .hi2	= $fd
	; .lo2	= $fe

	strlen = $02
	offset = $fd

	slowdown = $f7
	last_horscroll = $f8
	tmp1 = $f9
	tmp2 = $fa
	tmp3 = $fb

	sprite_0_v = $57
	sprite_1_v = $58
	sprite_2_v = $59
	sprite_3_v = $5a
}

int_scroller_raster_line = 243
int_grafx_raster_line = 30
int_text_raster_line = 192

max_slowdown  = $01

; some test title
.msg !scr "                                     Jeffffffff!! Bonne Fete! $30 ans deja! Je te souhaite un joyeux anniversaire et j'espere que tu vas passez une excellente journee et que ca sera le debut d'une annee exceptionnellement heureuse pour toi et ta famille.", 0

!src "sprites.a"

; vim: ft=acme ts=2 sw=2
