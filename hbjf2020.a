!src "macros.a"
!src "stub.a"


*=$2000
!bin "background_bitmap.raw"


*=$c000
!bin "background_screen.raw"

; *=$c400
; !bin "clouds_color-ram.raw"

; -------------------
;  ASM
; -------------------

*=$0820

	; clear screen
	ldx #$00
-
	;lda #33		; #$20 is a blank char
	; sta screen			+ 256 * 0,x ; fill four areas with 256 spacebar characters
	; sta screen			+ 256 * 1,x
	; sta screen			+ 256 * 2,x
	; sta screen			+ 256 * 3 - 18,x

	lda $c000 		+ 256 * 0, x
	sta screen	+ 256 * 0, x
	lda $c000 		+ 256 * 1, x
	sta screen	+ 256 * 1, x
	lda $c000 		+ 256 * 2, x
	sta screen	+ 256 * 2, x
	;lda $c000 		+ 256 * 3 - 18, x
	;sta screen	+ 256 * 3 - 18, x

	; lda #yellow
	; sta $d800	+ 256 * 0, x
	; sta $d800	+ 256 * 1, x

	lda #black
	sta $d800	+ 256 * 2, x

	; ;lda $c400 		+ 256 * 3 - 18, x
	; lda #dark_grey
	; sta $d800	+ 256 * 3 - 18, x

	inx
	bne -				; did X overflow to zero yet?

	ldx #$00
	;lda #$1a
	lda #$20
-
	sta screen + 18 * 40, x 
	inx
	bne -


	; set colors
	+setabs foreground, black
	+setabs background, dark_grey

	; switch to lowercase mode
	+switch_lowercase

	; set 38 column mode
	;+setabs horscroll, col38
	lda horscroll
	and #%11110111
	sta horscroll

beginning

	;enable all sprites
	+setabs sprite_enable, $ff

	; copy sprite data to memory image data
	+memcpy sprite_0, $2000 + 64 * 0, 64
	+memcpy sprite_1, $2000 + 64 * 1, 64
	+memcpy sprite_2, $2000 + 64 * 2, 64

	; set the sprite pointers to our image data
	+setabs sprite_ptr_0, ($2000 + 64 * 0) / 64 ; j
	+setabs sprite_ptr_1, ($2000 + 64 * 1) / 64 ; e
	+setabs sprite_ptr_2, ($2000 + 64 * 2) / 64 ; f
	+setabs sprite_ptr_3, ($2000 + 64 * 2) / 64 ; f, same as sprite 2

	; all sprites expanded 2x in x and y
	+setabs sprite_x_expansion, 2^0 + 2^1 + 2^2 + 2^3
	+setabs sprite_y_expansion, 2^0 + 2^1 + 2^2 + 2^3

	; set basic sprite color
	+setabs sprite_col_0, dark_grey
	+setabs sprite_col_1, dark_grey
	+setabs sprite_col_2, dark_grey
	+setabs sprite_col_3, dark_grey

	; set all sprites to multicolor
	+setabs sprite_multi, 2^0 + 2^1 + 2^2 + 2^3
	+setabs sprite_multicolor_2, grey
	+setabs sprite_multicolor_1, light_grey 

	; set sprite x positions
	+setabs sprite_0_x, ($64)
	+setabs sprite_1_x, ($64 + $2b)
	+setabs sprite_2_x, ($64 + $2b + $26)
	+setabs sprite_3_x, ($64 + $2b + $26 + $1d)

	; set sprite y positions
	+setabs sprite_0_y, $80
	+setabs sprite_1_y, $80
	+setabs sprite_2_y, $80
	+setabs sprite_3_y, $80

	; set scroll color
	ldy #$00
-
	lda #yellow
	sta $d800 + 40 * scroll_line, y
	iny
	cpy #$28
	bne -


	; initialize strlen, the message length

	ldy #$00
-
	lda .msg, y
	cmp #$00
	beq +
	iny
	jmp -
+
	sty strlen

	; clear message offset

	lda #$00
	sta offset

	; initialize scroll
	lda horscroll
	and #%11100111
	ora #7
	sta horscroll

	+setabs slowdown, max_slowdown

	; setup irq handler
	jsr irq_setup

	; wait for spacebar
-
	lda $dc01
	cmp #$ef
	bne -

; The End.

	rts



; -------------------
;  Horizontal Scroll
; -------------------

scroller
	pha
	tya
	pha
	txa
	pha

	dec slowdown
	lda slowdown
	cmp #0
	bne ++
	+setabs slowdown, max_slowdown

	; scroll 7 pixels to the left
	;dec horscroll
	lda horscroll
	and #7
	;+set $d020, horscroll
	cmp #0
	beq +
	dec horscroll
	jmp ++
+
	;lda horscroll
	;sta $0400
	jsr charscroll
	;dec $d021
	lda horscroll
	;and #%11100111
	ora #7
	sta horscroll
	;+setabs horscroll, $07
++
	+setabs interrupt_raster_line, int_grafx_raster_line
	+set16 interrupt_vector, grafx

	pla
	tax
	pla
	tay
	pla

	asl interrupt_status_register
	jmp final_interrupt_handler


irq_setup
	; from https://www.c64-wiki.com/wiki/Raster_interrupt
	lda #%01111111
	sta cia_interrupt_control_and_status
	and screen_control_register_1
	sta screen_control_register_1
	+setabs interrupt_raster_line, int_grafx_raster_line
	+set16 interrupt_vector, grafx
	+setabs interrupt_control_register, $01

	rts

charscroll
	; pha
	; tya
	; pha
	; txa
	; pha

	lda #blue
	sta background

	ldy offset ; current offset in the message

	; start printing the message
	ldx #$00
	;sty offset ; remember the offset we started from.
-
	cpy strlen
	bne +
	ldy #$00 ; wrap around the end of the message
	jmp -
+

	lda .msg, y
	sta screen + 40 * scroll_line, x

	iny ; increment the message offset

	inx
	cpx #$27 ; did we reach the end of the line?
	bne -

	inc offset ; reset the offset
	lda offset
	cmp strlen
	bne +
	lda #$00
	sta offset ; wrap around message if we're at the end
+
	; pla
	; tax
	; pla
	; tay
	; pla

	lda #dark_grey
	sta background

	rts


grafx
	lda #red
	sta background

	; set graphics mode
	lda $d011
	;pha
	sta tmp1
	and #%10011111
	ora #%00100000
	sta $d011

	; set multi-color graphics
	lda $d016
	sta tmp2
	;pha
	ora #%00010000
	sta $d016

	; set graphics source
	lda $d018
	sta tmp3
	;pha
	ora #%00001000
	sta $d018

	ldy horscroll
	sty last_horscroll
	+setabs horscroll, 0

	+setabs interrupt_raster_line, int_text_raster_line
	+set16 interrupt_vector, textmode

	asl interrupt_status_register
	jmp default_interrupt_handler


textmode
	;pla
	;sta $d018
	;pla
	;sta $d016
	;pla
	;sta $d011

	lda tmp3
	sta $d018

	lda tmp2
	sta $d016

	lda tmp1
	sta $d011

	ldy last_horscroll
	sty horscroll

	; set text-mode
	; lda $d011
	; and #%11011111
	; sta $d011

	lda #dark_grey
	sta background

	+setabs interrupt_raster_line, int_scroller_raster_line
	+set16 interrupt_vector, scroller

	asl interrupt_status_register
	jmp default_interrupt_handler

; ---------------
;  data
; ---------------

!addr {
	clrscr = $e544
	screen = $0400
	color_memory = $d800

	background = $d020
	foreground = $d021
	horscroll = $d016

	sprite_enable = $d015

	sprite_ptr_0 = $07f8
	sprite_ptr_1 = $07f9
	sprite_ptr_2 = $07fa
	sprite_ptr_3 = $07fb

	sprite_col_0 = $d027
	sprite_col_1 = $d028
	sprite_col_2 = $d029
	sprite_col_3 = $d02a

	sprite_multi = $d01c

	sprite_0_x = $d000
	sprite_0_y = $d001
	sprite_1_x = $d002
	sprite_1_y = $d003
	sprite_2_x = $d004
	sprite_2_y = $d005
	sprite_3_x = $d006
	sprite_3_y = $d007

	sprite_x_expansion = $d01d
	sprite_y_expansion = $d017

	sprite_multicolor_1 = $d025
	sprite_multicolor_2 = $d026
}

!addr {
	cia_interrupt_control_and_status = $dc0d
	screen_control_register_1 = $d011
	memory_setup_register = $d018
	interrupt_raster_line = $d012
	interrupt_vector = $0314
	interrupt_control_register = $d01a
	interrupt_status_register = $d019
	default_interrupt_handler = $ea31
	final_interrupt_handler = $ea81
}

; 38 columns mode for horscroll

col40 = $08
col38 = $00

; line to scroll

scroll_line = $16

; colors

black				= $00
white				= $01
red					= $02
blue				= $06
cyan				= $03
purple			= $04
green				= $05
yellow			= $07
orange			= $08
brown				= $09
pink				= $0A
dark_grey		= $0B
grey				= $0C
light_green	= $0D
light_blue	= $0E
light_grey	= $0F

; registers

!addr {

	.r1		= $fb  ; fb/fc  as 16-bits register 1
	.hi1	= $fb
	.lo1	= $fc

	; .r2		= $fd  ; fd/fe  as 16-bits register 2
	; .hi2	= $fd
	; .lo2	= $fe

	strlen = $02
	offset = $fd

	;current_screen = $f7
	;current_backbuffer = $f9
	;current_scroll = $fd
	slowdown = $f7
	last_horscroll = $f8
	tmp1 = $f9
	tmp2 = $fa
	tmp3 = $fb
}

int_scroller_raster_line = 243
int_grafx_raster_line = 20
int_text_raster_line = 192

max_slowdown  = $01

; some test title
.msg !scr "       Ceci est un message plus court mais pas tant que ca", 0

; color scheme
.colors !byte $01, $0e, $06, $0e

!src "sprites.a"

; vim: ft=acme ts=2 sw=2
