!src "macros.a"
!src "stub.a"

; -------------------
;  ASM
; -------------------

*=$0820

	; clear screen
	jsr clrscr

	; set colors
	+setabs foreground, black
	+setabs background, dark_grey

	; switch to lowercase mode
	+switch_lowercase

	; set 38 column mode
	+setabs horscroll, col38

setup
	; from https://www.c64-wiki.com/wiki/Raster_interrupt
	lda #%01111111
	sta cia_interrupt_control_and_status
	and screen_control_register_1
	sta screen_control_register_1
	lda #210
	sta interrupt_raster_line
	+set16 interrupt_vector, irq_handler
	+setabs interrupt_control_register, $01



beginning

	;enable all sprites
	+setabs sprite_enable, $ff

	; copy sprite data to memory image data
	+memcpy sprite_0, $2000 + 64 * 0, 64
	+memcpy sprite_1, $2000 + 64 * 1, 64
	+memcpy sprite_2, $2000 + 64 * 2, 64

	; set the sprite pointers to our image data
	+setabs sprite_ptr_0, ($2000 + 64 * 0) / 64 ; j
	+setabs sprite_ptr_1, ($2000 + 64 * 1) / 64 ; e
	+setabs sprite_ptr_2, ($2000 + 64 * 2) / 64 ; f
	+setabs sprite_ptr_3, ($2000 + 64 * 2) / 64 ; f, same as sprite 2

	; all sprites expanded 2x in x and y
	+setabs sprite_x_expansion, 2^0 + 2^1 + 2^2 + 2^3
	+setabs sprite_y_expansion, 2^0 + 2^1 + 2^2 + 2^3

	; set basic sprite color
	+setabs sprite_col_0, dark_grey
	+setabs sprite_col_1, dark_grey
	+setabs sprite_col_2, dark_grey
	+setabs sprite_col_3, dark_grey

	; set all sprites to multicolor
	+setabs sprite_multi, 2^0 + 2^1 + 2^2 + 2^3
	+setabs sprite_multicolor_1, grey
	+setabs sprite_multicolor_2, light_grey

	; set sprite x positions
	+setabs sprite_0_x, ($64)
	+setabs sprite_1_x, ($64 + $2b)
	+setabs sprite_2_x, ($64 + $2b + $26)
	+setabs sprite_3_x, ($64 + $2b + $26 + $1d)

	; set sprite y positions
	+setabs sprite_0_y, $80
	+setabs sprite_1_y, $80
	+setabs sprite_2_y, $80
	+setabs sprite_3_y, $80


	; set scroll color
	ldy #$00
-
	lda #yellow
	sta $d800 + 40 * scroll_line, y
	iny
	cpy #$29
	bne -


	; initialize strlen, the message length

	ldy #$00
-
	lda .msg, y
	cmp #$00
	beq +
	iny
	jmp -
+
	sty strlen

	; clear message offset

	lda #$00
	sta offset

; -------------------
;  Horizontal Scroll
; -------------------

loop
	; scroll 7 pixels to the left
	ldx #$07
	stx horscroll
	jsr charscroll
	+sleep

start_horscroll

	ldx #$06 ; scroll 6 pixels
-
	stx horscroll
	+sleep
	cpx #$00
	beq loop
	dex
	jmp -

; The End.

	rts


charscroll
	pha 
	tya
	pha
	txa
	pha

	ldy offset ; current offset in the message

	; start printing the message
	ldx #$00
	;sty offset ; remember the offset we started from.
-
	cpy strlen
	bne +
	ldy #$00 ; wrap around the end of the message
	jmp -
+
	lda .msg, y
	iny ; increment the message offset

	sta screen + 40 * scroll_line, x ; print out a character

	inx
	cpx #$27 ; did we reach the end of the line?
	bne -

	inc offset ; reset the offset
	lda offset
	cmp strlen
	bne +
	lda #$00
	sta offset ; wrap around message if we're at the end
+
	pla
	tax
	pla
	tay
	pla

	rts




irq_handler
	lda #red
	sta $d020

	ldx #90
pause
	dex
	bne pause

	lda #dark_grey
	sta $d020

	asl interrupt_status_register
	jmp default_interrupt_handler

; ---------------
;  data
; ---------------

!addr {
	clrscr = $e544
	screen = $0400
	color_memory = $d800

	background = $d020
	foreground = $d021
	horscroll = $d016

	sprite_enable = $d015

	sprite_ptr_0 = $07f8
	sprite_ptr_1 = $07f9
	sprite_ptr_2 = $07fa
	sprite_ptr_3 = $07fb

	sprite_col_0 = $d027
	sprite_col_1 = $d028
	sprite_col_2 = $d029
	sprite_col_3 = $d02a

	sprite_multi = $d01c

	sprite_0_x = $d000
	sprite_0_y = $d001
	sprite_1_x = $d002
	sprite_1_y = $d003
	sprite_2_x = $d004
	sprite_2_y = $d005
	sprite_3_x = $d006
	sprite_3_y = $d007

	sprite_x_expansion = $d01d
	sprite_y_expansion = $d017

	sprite_multicolor_1 = $d025
	sprite_multicolor_2 = $d026
}

!addr {
	cia_interrupt_control_and_status = $dc0d
	screen_control_register_1 = $d011
	interrupt_raster_line = $d012
	interrupt_vector = $0314
	interrupt_control_register = $d01a
	interrupt_status_register = $d019
	default_interrupt_handler = $ea31
}

; 38 columns mode for horscroll

col40 = $08
col38 = $00

; line to scroll

scroll_line = $17

; colors

black				= $00
white				= $01
red					= $02
blue				= $06
cyan				= $03
purple			= $04
green				= $05
yellow			= $07
orange			= $08
brown				= $09
pink				= $0A
dark_grey		= $0B
grey				= $0C
light_green	= $0D
light_blue	= $0E
light_grey	= $0F

; registers

!addr {

	.r1		= $fb  ; fb/fc  as 16-bits register 1
	.hi1	= $fb
	.lo1	= $fc

	; .r2		= $fd  ; fd/fe  as 16-bits register 2
	; .hi2	= $fd
	; .lo2	= $fe

	strlen = $02
	offset = $fd
}

; some test title
.msg !scr "       Ceci est un message plus court mais pas tant que ca", 0

; color scheme
.colors !byte $01, $0e, $06, $0e

!src "sprites.a"

; vim: ft=acme ts=2 sw=2
