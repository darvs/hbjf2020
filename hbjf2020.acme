!to "hbjf2020.prg", cbm


; sleep macro will wait for a few vertical blanks
!macro sleep {
	+real_sleep
}

!macro real_sleep {
	pha
	txa
	pha
	lda #$00
	ldx #$01
.loop

.waitvb
	bit $d011
	bpl .waitvb
.waitvb2
	bit $d011
	bmi .waitvb2

	dex
	bne .loop
	pla
	tax
	pla
}


!macro set .addr, .val {
	lda .val
	sta .addr
}

!macro setabs .addr, .val {
	lda #.val
	sta .addr
}

!macro set16 .addr, .val16 {
	lda #<(.val16)
	sta .addr
	lda #>(.val16)
	sta .addr+1
}

!macro switch_lowercase {
	lda $d018
	ora #$07
	sta $d018
}

; -------------------
;  BASIC Stub
; -------------------

*=$0801

	!byte $0c,$08 ; pointer to next basic line (not sure if right)
	!byte $9a,$02 ; line number
	!byte $9e ; sys
	!text " 2080" ; start of asm at $0820 (DEC 2080)
	!byte $00,$00,$00,$00

; -------------------
;  ASM
; -------------------

*=$0820


	jsr clrscr ; clear screen

	+set foreground, .black
	+set background, .red

	; switch to lowercase mode
	+switch_lowercase

	; set 38 column mode
	+set horscroll, .col38

	;+set $0400, .zee ; .zee=$1a='Z'


beginning

	;enable all sprites

	+setabs sprite_enable, $ff


	; copy sprite data for all sprites 
	ldx #$00
-
	lda sprite_0, x
	sta $2000 + 64 * 0, x
	lda sprite_1, x
	sta $2000 + 64 * 1, x
	lda sprite_2, x
	sta $2000 + 64 * 2, x
	inx
	cpx #$41
	bne -

	; set sprite pointer to $2000
	;lda #$80 ; = $2000 / 64
	;sta $07f8

	+setabs sprite_ptr_0, ($2000 + 64 * 0) / 64 ; j
	+setabs sprite_ptr_1, ($2000 + 64 * 1) / 64 ; e
	+setabs sprite_ptr_2, ($2000 + 64 * 2) / 64 ; f
	+setabs sprite_ptr_3, ($2000 + 64 * 2) / 64 ; f, same as sprite 2

	; set sprite 4 first sprites to multicolor
	;lda #$01
	;sta $d01c

	+setabs sprite_multi, 2^0 + 2^1 + 2^2 + 2^3


	lda #$07 ; Sprite multicolor 1
	sta $d025
	lda #$06 ; Sprite multicolor 2
	sta $d026

	+setabs sprite_col_0, $02
	+setabs sprite_col_1, $02
	+setabs sprite_col_2, $02
	+setabs sprite_col_3, $02

	+setabs sprite_0_x, ($90)
	+setabs sprite_1_x, ($90 + $16)
	+setabs sprite_2_x, ($90 + $16 + $13)
	+setabs sprite_3_x, ($90 + $16 + $13 + $0e)

	+setabs sprite_0_y, $84
	+setabs sprite_1_y, $84
	+setabs sprite_2_y, $84
	+setabs sprite_3_y, $84




	;+sleep
	;ldx #$07
	;stx horscroll

	ldy #$00


loop
	+sleep
	ldx #$07
	stx horscroll

	ldx #$00
	sty .hi1
-
	lda .msg, y
	cmp #$00
	bne +
	ldy #$00
	jmp -
+
	iny

	;sta $0400, x
	sta $0680, x

	inx
	cpx #$27
	bne -

	;tya
	;sbc #$26
	;tay
	ldy .hi1
	iny
	lda .msg, y
	cmp #$00
	bne +
	ldy #$00
	sty .hi1
+


start_horscroll

	ldx #$07
-
	;+sleep
	;+sleep

	stx horscroll
	cpx #$00
	beq loop
	dex
	+sleep
	jmp -



	rts


; ---------------
;  data
; ---------------

!addr clrscr = $e544
!addr background = $d020
!addr foreground = $d021
!addr horscroll = $d016

!addr sprite_enable = $d015

!addr sprite_ptr_0 = $07f8
!addr sprite_ptr_1 = $07f9
!addr sprite_ptr_2 = $07fa
!addr sprite_ptr_3 = $07fb

!addr sprite_col_0 = $d027
!addr sprite_col_1 = $d028
!addr sprite_col_2 = $d029
!addr sprite_col_3 = $d02a

!addr sprite_multi = $d01c

!addr sprite_0_x = $d000
!addr sprite_0_y = $d001
!addr sprite_1_x = $d002
!addr sprite_1_y = $d003
!addr sprite_2_x = $d004
!addr sprite_2_y = $d005
!addr sprite_3_x = $d006
!addr sprite_3_y = $d007




.all_sprites !byte $ff

; 38 columns mode for horscroll

.col40 !byte $08
.col38 !byte $00

; colors

.black				!byte $00
.white				!byte $01 
.red					!byte $02
.blue					!byte $06
.cyan					!byte $03
.purple				!byte $04
.green				!byte $05
.yellow				!byte $07
.orange				!byte $08
.brown				!byte $09
.pink					!byte $0A
.dark_grey		!byte $0B
.grey					!byte $0C
.light_green	!byte $0D
.light_blue		!byte $0E
.light_grey		!byte $0F

.zee !byte $1A

; registers 

.r1		!byte $fb  ; fb/fc  as 16-bits register 1
.hi1	!byte $fb
.lo1	!byte $fc

.r2		!byte $fd  ; fd/fe  as 16-bits register 2
.hi2	!byte $fd
.lo2	!byte $fe

; some test title
.msg !scr "      Bonsoir papa. Ceci est un test. Ce message devrait avoir plus de 38 caracteres de long, mais moins de 256 caracteres. --- ", 0

; color scheme
.colors !byte $01, $0e, $06, $0e

.dummy !byte $ff, $ff




; all chars in message except initial b
chars
	!byte $7d, $05, $16, $0f ; o
	!byte $7e, $05, $1c, $0e ; n
	!byte $7f, $05, $22, $0e ; n
	!byte $80, $05, $28, $05 ; e

	!byte $a5, $05, $1c, $06 ; f
	!byte $a6, $05, $22, $05 ; e
	!byte $a7, $05, $28, $14 ; t
	!byte $a8, $05, $30, $05 ; e

	!byte $cd, $05, $22, $0a ; j
	!byte $ce, $05, $28, $05 ; e
	!byte $cf, $05, $30, $06 ; f
	!byte $d0, $05, $36, $06 ; f

; sprite 0 / multicolor / color: $02
sprite_0
!byte $00,$00,$00,$00,$0a,$a8,$00,$09
!byte $58,$00,$09,$58,$00,$09,$58,$00
!byte $0a,$5a,$00,$02,$56,$00,$02,$56
!byte $00,$00,$96,$00,$00,$96,$00,$00
!byte $96,$00,$00,$96,$2a,$80,$96,$25
!byte $82,$56,$25,$82,$5a,$25,$aa,$58
!byte $25,$69,$58,$25,$55,$58,$09,$55
!byte $60,$02,$aa,$80,$00,$00,$00,$82

; sprite 1 / multicolor / color: $02
sprite_1
!byte $00,$00,$00,$00,$00,$00,$00,$00
!byte $00,$00,$00,$00,$00,$28,$00,$00
!byte $aa,$00,$02,$96,$80,$02,$55,$80
!byte $0a,$69,$80,$09,$a9,$80,$09,$a6
!byte $80,$09,$96,$a0,$09,$9a,$60,$09
!byte $5a,$60,$09,$69,$60,$09,$69,$60
!byte $0a,$55,$a0,$02,$96,$80,$00,$aa
!byte $00,$00,$00,$00,$00,$00,$00,$82

; sprite 2 / multicolor / color: $02
sprite_2
!byte $00,$00,$00,$00,$a8,$00,$02,$9a
!byte $00,$02,$56,$00,$09,$66,$00,$09
!byte $a6,$00,$09,$8a,$00,$29,$a0,$00
!byte $29,$68,$00,$29,$58,$00,$25,$98
!byte $00,$25,$a0,$00,$29,$80,$00,$09
!byte $80,$00,$09,$80,$00,$09,$80,$00
!byte $29,$80,$00,$26,$80,$00,$2a,$80
!byte $00,$2a,$80,$00,$00,$00,$00,$82; vim: ts=2 sw=2
